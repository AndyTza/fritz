#!/usr/bin/env python
import argparse
import sys
import subprocess
import os
from pathlib import Path


def run(args):
    """
    Launch the marshal
    """
    env = os.environ.copy()
    env.update({"FLAGS": "--config=../fritz.yaml"})

    if args.init:
        # todo: config.yaml.defaults to config.yaml if config.yaml does not exist
        # subprocess.run(["make", "db_init"], cwd="skyportal", env=env)
        subprocess.run(["make", "docker-local"], cwd="skyportal", env=env)
        #source /skyportal_env/bin/activate
        subprocess.run(["docker-compose", "build"], cwd="kowalski")
    else:
        # start up skyportal
        # subprocess.run(["make", "run"], cwd="skyportal", env=env)
        subprocess.run(["docker-compose", "up", "-d"], cwd="skyportal", env=env)
        # init skyportal and load test data
        subprocess.run(["docker", "exec", "-it", "skyportal_web_1", "/bin/bash", "-c",
                        "source /skyportal_env/bin/activate; make load_demo_data"], cwd="skyportal", env=env)
        # start up kowalski
        subprocess.run(["docker-compose", "up", "-d"], cwd="kowalski")


def stop(args):
    """
        Shut marshal down
    :param args:
    :return:
    """
    print('Shutting fritz down')
    subprocess.run(["docker-compose", "down"], cwd="kowalski")
    subprocess.run(["docker-compose", "down"], cwd="skyportal")


def log(args):
    """
    Show colorized logs while the marshal is running
    """
    subprocess.run(["make", "log"], cwd="skyportal")


def develop(args=None):
    """
    Install developer tools.
    """
    subprocess.run(["pip", "install", "-r", ".requirements/dev.txt"])
    subprocess.run(["pre-commit", "install"])


def lint(args):
    try:
        import pre_commit  # noqa: F401
    except ImportError:
        develop()

    subprocess.run(["pre-commit", "run", "--all-files"])


def test(args):
    print("Launching tests...")


def doc(args):
    subprocess.run(["make", "html"], cwd="doc")
    Path("doc/_build/html/.nojekyll").touch()

    if args.upload:
        subprocess.run(
            [
                "./tools/push_dir_to_repo.py",
                "--branch",
                "master",
                "--committer",
                "fritz",
                "--email",
                "fritz@fritz-marshal.org",
                "--message",
                "Update website",
                "--force",
                "./doc/_build/html",
                "git@github.com:fritz-marshal/doc",
            ]
        )


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(title="commands", dest="command")

    commands = [
        ("run", "ðŸš€ Launch the marshal"),
        ("stop", "âœ‹ Shut the marshal down"),
        ("develop", "Install tools for developing Fritz"),
        ("lint", "Lint the full code base"),
        ("test", "Run the test suite"),
        ("doc", "Build the documentation"),
        ("help", "Print this message"),
    ]

    parsers = {}
    for (cmd, desc) in commands:
        parsers[cmd] = subparsers.add_parser(cmd, help=desc)

    parsers["run"].add_argument(
        "--init", action="store_true", help="Initialize the database"
    )

    parsers["doc"].add_argument(
        "--upload", action="store_true", help="Upload documentation to GitHub"
    )

    args = parser.parse_args()
    if args.command is None or args.command == "help":
        parser.print_help()
    else:
        getattr(sys.modules[__name__], args.command)(args)
